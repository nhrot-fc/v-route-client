/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as VehiculosRouteImport } from './routes/vehiculos'
import { Route as SimulacionRouteImport } from './routes/simulacion'
import { Route as PedidosRouteImport } from './routes/pedidos'
import { Route as MantenimientosRouteImport } from './routes/mantenimientos'
import { Route as IncidentesRouteImport } from './routes/incidentes'
import { Route as EntregasRouteImport } from './routes/entregas'
import { Route as BloqueosRouteImport } from './routes/bloqueos'
import { Route as IndexRouteImport } from './routes/index'

const VehiculosRoute = VehiculosRouteImport.update({
  id: '/vehiculos',
  path: '/vehiculos',
  getParentRoute: () => rootRouteImport,
} as any)
const SimulacionRoute = SimulacionRouteImport.update({
  id: '/simulacion',
  path: '/simulacion',
  getParentRoute: () => rootRouteImport,
} as any)
const PedidosRoute = PedidosRouteImport.update({
  id: '/pedidos',
  path: '/pedidos',
  getParentRoute: () => rootRouteImport,
} as any)
const MantenimientosRoute = MantenimientosRouteImport.update({
  id: '/mantenimientos',
  path: '/mantenimientos',
  getParentRoute: () => rootRouteImport,
} as any)
const IncidentesRoute = IncidentesRouteImport.update({
  id: '/incidentes',
  path: '/incidentes',
  getParentRoute: () => rootRouteImport,
} as any)
const EntregasRoute = EntregasRouteImport.update({
  id: '/entregas',
  path: '/entregas',
  getParentRoute: () => rootRouteImport,
} as any)
const BloqueosRoute = BloqueosRouteImport.update({
  id: '/bloqueos',
  path: '/bloqueos',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/bloqueos': typeof BloqueosRoute
  '/entregas': typeof EntregasRoute
  '/incidentes': typeof IncidentesRoute
  '/mantenimientos': typeof MantenimientosRoute
  '/pedidos': typeof PedidosRoute
  '/simulacion': typeof SimulacionRoute
  '/vehiculos': typeof VehiculosRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/bloqueos': typeof BloqueosRoute
  '/entregas': typeof EntregasRoute
  '/incidentes': typeof IncidentesRoute
  '/mantenimientos': typeof MantenimientosRoute
  '/pedidos': typeof PedidosRoute
  '/simulacion': typeof SimulacionRoute
  '/vehiculos': typeof VehiculosRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/bloqueos': typeof BloqueosRoute
  '/entregas': typeof EntregasRoute
  '/incidentes': typeof IncidentesRoute
  '/mantenimientos': typeof MantenimientosRoute
  '/pedidos': typeof PedidosRoute
  '/simulacion': typeof SimulacionRoute
  '/vehiculos': typeof VehiculosRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/bloqueos'
    | '/entregas'
    | '/incidentes'
    | '/mantenimientos'
    | '/pedidos'
    | '/simulacion'
    | '/vehiculos'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/bloqueos'
    | '/entregas'
    | '/incidentes'
    | '/mantenimientos'
    | '/pedidos'
    | '/simulacion'
    | '/vehiculos'
  id:
    | '__root__'
    | '/'
    | '/bloqueos'
    | '/entregas'
    | '/incidentes'
    | '/mantenimientos'
    | '/pedidos'
    | '/simulacion'
    | '/vehiculos'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  BloqueosRoute: typeof BloqueosRoute
  EntregasRoute: typeof EntregasRoute
  IncidentesRoute: typeof IncidentesRoute
  MantenimientosRoute: typeof MantenimientosRoute
  PedidosRoute: typeof PedidosRoute
  SimulacionRoute: typeof SimulacionRoute
  VehiculosRoute: typeof VehiculosRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/vehiculos': {
      id: '/vehiculos'
      path: '/vehiculos'
      fullPath: '/vehiculos'
      preLoaderRoute: typeof VehiculosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/simulacion': {
      id: '/simulacion'
      path: '/simulacion'
      fullPath: '/simulacion'
      preLoaderRoute: typeof SimulacionRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/pedidos': {
      id: '/pedidos'
      path: '/pedidos'
      fullPath: '/pedidos'
      preLoaderRoute: typeof PedidosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/mantenimientos': {
      id: '/mantenimientos'
      path: '/mantenimientos'
      fullPath: '/mantenimientos'
      preLoaderRoute: typeof MantenimientosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/incidentes': {
      id: '/incidentes'
      path: '/incidentes'
      fullPath: '/incidentes'
      preLoaderRoute: typeof IncidentesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/entregas': {
      id: '/entregas'
      path: '/entregas'
      fullPath: '/entregas'
      preLoaderRoute: typeof EntregasRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/bloqueos': {
      id: '/bloqueos'
      path: '/bloqueos'
      fullPath: '/bloqueos'
      preLoaderRoute: typeof BloqueosRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  BloqueosRoute: BloqueosRoute,
  EntregasRoute: EntregasRoute,
  IncidentesRoute: IncidentesRoute,
  MantenimientosRoute: MantenimientosRoute,
  PedidosRoute: PedidosRoute,
  SimulacionRoute: SimulacionRoute,
  VehiculosRoute: VehiculosRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
